"""Add slug field to Story model

Revision ID: 712f4e10b3fa
Revises: bd1d2c710237
Create Date: 2025-06-27 20:47:22.870903

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import String
from slugify import slugify


# revision identifiers, used by Alembic.
revision = '712f4e10b3fa'
down_revision = 'bd1d2c710237'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Add slug column as nullable first
    with op.batch_alter_table('story', schema=None) as batch_op:
        batch_op.add_column(sa.Column('slug', sa.String(length=200), nullable=True))
    
    # 2. Populate slugs for existing stories
    bind = op.get_bind()
    stories = bind.execute(sa.text("SELECT id, title FROM story")).fetchall()
    for s in stories:
        slug = slugify(s.title)
        # Handle duplicate slugs by adding a number
        counter = 1
        original_slug = slug
        while bind.execute(sa.text("SELECT COUNT(*) FROM story WHERE slug = :slug"), {"slug": slug}).scalar() > 0:
            slug = f"{original_slug}-{counter}"
            counter += 1
        bind.execute(sa.text("UPDATE story SET slug = :slug WHERE id = :id"), {"slug": slug, "id": s.id})
    
    # 3. Make slug NOT NULL and add unique constraint
    with op.batch_alter_table('story', schema=None) as batch_op:
        batch_op.alter_column('slug', nullable=False)
        batch_op.create_unique_constraint('uq_story_slug', ['slug'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('story', schema=None) as batch_op:
        batch_op.drop_constraint('uq_story_slug', type_='unique')
        batch_op.drop_column('slug')

    # ### end Alembic commands ###
